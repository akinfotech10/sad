interface State {
    void insertCoin();
    void ejectCoin();
    void turnCrank();
    void dispense();
}

class GumballMachine {
    State noCoinState;
    State hasCoinState;
    State soldOutState;
    State soldState;

    State currentState;
    int count = 0;

    public GumballMachine(int numberOfGumballs) {
        noCoinState = new NoCoinState(this);
        hasCoinState = new HasCoinState(this);
        soldOutState = new SoldOutState(this);
        soldState = new SoldState(this);

        this.count = numberOfGumballs;
        if (numberOfGumballs > 0) {
            currentState = noCoinState;
        } else {
            currentState = soldOutState;
        }
    }

    void setState(State state) {
        currentState = state;
    }

    void releaseBall() {
        if (count != 0) {
            count--;
        }
    }

    void insertCoin() {
        currentState.insertCoin();
    }

    void ejectCoin() {
        currentState.ejectCoin();
    }

    void turnCrank() {
        currentState.turnCrank();
        currentState.dispense();
    }

    void refill(int count) {
        this.count = count;
        setState(noCoinState);
    }

    public int getCount() {
        return count;
    }

    public State getCurrentState() {
        return currentState;
    }

    public State getNoCoinState() {
        return noCoinState;
    }

    public State getHasCoinState() {
        return hasCoinState;
    }

    public State getSoldOutState() {
        return soldOutState;
    }

    public State getSoldState() {
        return soldState;
    }
}

class NoCoinState implements State {
    GumballMachine gumballMachine;

    public NoCoinState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    public void insertCoin() {
        System.out.println("You inserted a coin");
        gumballMachine.setState(gumballMachine.getHasCoinState());
    }

    public void ejectCoin() {
        System.out.println("You haven't inserted a coin");
    }

    public void turnCrank() {
        System.out.println("You turned the crank, but there's no coin");
    }

    public void dispense() {
        System.out.println("You need to pay first");
    }
}

class HasCoinState implements State {
    GumballMachine gumballMachine;

    public HasCoinState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    public void insertCoin() {
        System.out.println("You can't insert another coin");
    }

    public void ejectCoin() {
        System.out.println("Coin returned");
        gumballMachine.setState(gumballMachine.getNoCoinState());
    }

    public void turnCrank() {
        System.out.println("You turned the crank");
        gumballMachine.setState(gumballMachine.getSoldState());
    }

    public void dispense() {
        System.out.println("No gumball dispensed");
    }
}

class SoldState implements State {
    GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    public void insertCoin() {
        System.out.println("Please wait, we're already giving you a gumball");
    }

    public void ejectCoin() {
        System.out.println("Sorry, you already turned the crank");
    }

    public void turnCrank() {
        System.out.println("Turning again doesn't get you another gumball");
    }

    public void dispense() {
        gumballMachine.releaseBall();
        if (gumballMachine.getCount() > 0) {
            gumballMachine.setState(gumballMachine.getNoCoinState());
        } else {
            System.out.println("Out of gumballs");
            gumballMachine.setState(gumballMachine.getSoldOutState());
        }
    }
}

class SoldOutState implements State {
    GumballMachine gumballMachine;

    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    public void insertCoin() {
        System.out.println("Sorry, we're sold out");
    }

    public void ejectCoin() {
        System.out.println("You can't eject, you haven't inserted a coin");
    }

    public void turnCrank() {
        System.out.println("You turned the crank, but there's no gumballs");
    }

    public void dispense() {
        System.out.println("No gumball dispensed");
    }
}

public class GumballMachineTest {
    public static void main(String[] args) {
        GumballMachine gumballMachine = new GumballMachine(2);

        gumballMachine.insertCoin();
        gumballMachine.turnCrank();

        gumballMachine.insertCoin();
        gumballMachine.turnCrank();

        gumballMachine.insertCoin();
        gumballMachine.turnCrank();
    }
}
