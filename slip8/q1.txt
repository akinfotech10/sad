import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_20newsgroups
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

newsgroups = fetch_20newsgroups(subset='all')

X = newsgroups.data  # The news articles (text data)
y = newsgroups.target  # The corresponding categories (0 to 19)

tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.95, min_df=2)
X_tfidf = tfidf_vectorizer.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

naive_bayes = MultinomialNB()
naive_bayes.fit(X_train, y_train)

y_pred = naive_bayes.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"\nAccuracy: {accuracy * 100:.2f}%")

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

    print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=newsgroups.target_names))

import seaborn as sns
plt.figure(figsize=(10, 7))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues", xticklabels=newsgroups.target_names, yticklabels=newsgroups.target_names)
plt.title("Confusion Matrix - Multinomial Naive Bayes")
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

new_article = ["The economy is showing strong signs of growth, with unemployment at a record low."]
new_article_tfidf = tfidf_vectorizer.transform(new_article)
predicted_category = naive_bayes.predict(new_article_tfidf)
print(f"\nPredicted category for the new article: {newsgroups.target_names[predicted_category[0]]}")
