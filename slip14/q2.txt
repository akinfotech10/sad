mkdir employee-api
cd employee-api

npm init -y


npm install express mongoose body-parser

mkdir models
touch models/Employee.js

// models/Employee.js
const mongoose = require('mongoose');

const employeeSchema = new mongoose.Schema({
    name: { type: String, required: true },
    position: { type: String, required: true },
    salary: { type: Number, required: true }
});

const Employee = mongoose.model('Employee', employeeSchema);

module.exports = Employee;

touch app.js

// app.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const Employee = require('./models/Employee');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware for parsing request bodies
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/employeeDB', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error('MongoDB connection error:', err));

app.post('/employees', async (req, res) => {
    const { name, position, salary } = req.body;

    const newEmployee = new Employee({ name, position, salary });

    try {
        const savedEmployee = await newEmployee.save();
        res.status(201).json({ message: 'Employee created successfully', employee: savedEmployee });
    } catch (error) {
        res.status(400).json({ message: 'Error creating employee', error: error.message });
    }
});

app.put('/employees/:id', async (req, res) => {
    const { id } = req.params;
    const { name, position, salary } = req.body;

    try {
        const updatedEmployee = await Employee.findByIdAndUpdate(id, { name, position, salary }, { new: true });
        if (!updatedEmployee) {
            return res.status(404).json({ message: 'Employee not found' });
        }
        res.json({ message: 'Employee updated successfully', employee: updatedEmployee });
    } catch (error) {
        res.status(400).json({ message: 'Error updating employee', error: error.message });
    }
});

app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: 'Something went wrong!' });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

node app.js


